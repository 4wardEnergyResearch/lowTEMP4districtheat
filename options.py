# -*- coding: utf-8 -*-
"""
Author: 4wardEnergy Research GmbH
Date: 2024-05-14
Version: 1.0

This configuration file contains the necessary settings and parameters 
for the hydraulic network simulation program. It defines paths to data 
directories, options for data preparation, load profiles, AI models, 
physical constants, and various simulation settings.

Classes:
- var_cons_list_analysis: Contains settings and paths for consumer list analysis.
- var_cons_prep: Contains settings and paths for consumer data preparation.
- var_load_profiles: Contains settings and paths for load profiles.
- var_ml_models: Contains settings for machine learning models.
- var_phy: Contains physical constants.
- var_H2O: Contains physical properties of water.
- var_misc: Contains miscellaneous variables.
- var_gaps: Contains variables related to data gap filling.
- var_sim: Contains simulation settings.
- plots: Contains settings related to plotting and visualizations.
"""

"""
Copyright (C) 2024  4wardEnergy Research GmbH

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""

import os
from openpyxl.styles import NamedStyle
import math
from simulation.fcns_options import check_weather_file

###############################################################################
# DATA PREPARATION ############################################################
###############################################################################

# CONSUMER LIST ANALYSIS ######################################################
###############################################################################
class var_cons_list_analysis:
    # FILE PATHS ##############################################################
    # Project directory
    project_dir = os.path.dirname(os.path.abspath(__file__))

    # Data directory
    data_dir = os.path.join(project_dir, 'examples')
    # Path to the topology file (xlsx) containing the network information. This entry is changed by the GUI.
    topology_file = 'C:/Users/Standard/4ward Energy Dropbox/Stefan Janisch/Github_SJ/lT4dh/examples/IN_topologies/Test_Case_Single_Feeder.xlsx'

    # Raw data directory containing the raw consumer information
    raw_data_dir = os.path.join(data_dir, 'IN_raw_data')

    # OPTIONS #################################################################
    threshold_active_heizkreis = 8/100 # factorial

# CONSUMER PREP ###############################################################
###############################################################################
class var_cons_prep:
    # FILE PATHS ##############################################################
    # Some directories are copied from var_cons__list_analysis by default
    home_dir = var_cons_list_analysis.project_dir
    data_dir = var_cons_list_analysis.data_dir
    raw_data_dir = var_cons_list_analysis.raw_data_dir

    # Name of consumer information file generated by "data_prep_consumer_list_analysis.py"
    input_file_consumer_info = 'consumer_info.csv'

    # Path to consumer information file
    path_to_file_consumer_info = os.path.join(raw_data_dir, input_file_consumer_info)

    # Consumer file output directory for data_prep_consumers.py
    cons_dir = os.path.join(data_dir, 'OUT_prepared_data')
    
    # OPTIONS #################################################################
    # Option to debug csv files (0 = no, 1 = yes)
    debug_csvs = 0

# LOAD PROFILES ###############################################################
###############################################################################
class var_load_profiles:
    # FILE PATHS ##############################################################
    # Some directories are copied from var_cons_list_analysis/var_cons_prep by default
    home_dir = var_cons_list_analysis.project_dir
    data_dir = var_cons_list_analysis.data_dir
    cons_dir = var_cons_prep.cons_dir
    # This entry is changed by the GUI.
    topology_file = 'C:/Users/Standard/4ward Energy Dropbox/Stefan Janisch/Github_SJ/lT4dh/examples/IN_topologies/Test_Case_Single_Feeder.xlsx'

    # Directory containing the load profiles
    load_profile_dir = os.path.join(data_dir, 'OUT_load_profiles')

    # Path of weather file directory
    weather_dir = os.path.join(data_dir, 'IN_weather_data')
    # Weather file name (str). If no file name is specified, the first csv file found in the directory is used.
    weather_file_name = None

    weather_file = check_weather_file(weather_dir, weather_file_name)


    # OPTIONS #################################################################
    # Threshold for perc. of data dropouts in historical data during the winter for flagging [%]
    threshold_data_dropouts: int = 10 
    # Year for which the load profiles should be calculated. This entry is changed by the GUI.
    year: int = 2022 
    # NUTS2-Region for which the load profiles shall be calculated
    NUTS_region: str = "AT21"
    # Show regression plot of kWh_m3 vs mean Temp. Difference
    show_regression_plot: bool = False

# AI MODELS ###################################################################
###############################################################################

class var_ml_models:
    # Machine Learning Model Directory
    ml_model_dir = os.path.join(var_cons_list_analysis.data_dir, 'OUT_ml_models')
    # Whether to overwrite existing ML models
    overwrite_ml_models = False 
    # Whether to force the training of ML models regardless of autocorrelation peaks
    force_ml_models = False 
    # Path of the ML model results file
    results_xlsx_path = os.path.join(ml_model_dir, 'ml_model_results.xlsx')

###############################################################################
# SIMULATION ##################################################################
###############################################################################

# BASIC PHYSICAL QUANTITIES ###################################################
###############################################################################
class var_phy:
    # gravitational acceleration [m/s²]
    g = 9.81

# SUBSTANCE DATA WATER ########################################################
###############################################################################
class var_H2O:
    # Specific density of water at 50°C and 1 bar [kg/m³]
    # (VDI-Wärmeatlas 2006, Dba2)
    rho = 988.05
    # Specific heat capacity of water at 50°C and 1 bar [J/kgK]
    # (VDI-Wärmeatlas 2006, Dba2)
    c_p = 4180

# MISCELLANEOUS VARIABLES #####################################################
###############################################################################
class var_misc:
    # Date display format [-]
    date_style = NamedStyle(name='datetime', number_format='YYYY-MM-DD HH:MM:SS')

# GAPFILLING VARIABLES ########################################################
###############################################################################
class var_gaps:
    # Empirically determined standard value for ratio between heat absorbed by the 
    # heat transfer station [kWh] and water volume flowing through it [m³].
    # Only used when there is no historical data available.
    kWh_m3 = 31.67 # [kWh/m3]]

    # Use historical data for ÜGS efficiency (kWh_m3) - Standard value is used 
    # for all consumers if this is set to False
    use_historical_kWh_m3 : bool = True

    # Error detection method
    error_detection = 2
    '''
    0 ... Detection if a measurement has failed is done through plausibility 
          check with the measurements themselves (e.g., temperature must 
          change within a certain number of time steps)
    1 ... Error detection is done through the Hoval TopTronic system
    2 ... Error detection is done through the Hoval TopTronic system. If no data 
          is available for this, switch to operating state "0".
    '''

    # Maximum time span of unchanged temperature values to detect an error [min]
    equal_values_max_min = 75
    
    # Gapfilling mode
    fill_mode = 0
    '''
    0...Standard Gapfilling mode. Gaps are filled using the method specified in the input excel file
        (Last week's data, ML-based or standard load profile)
    1...volumetric flow balance is closed (Does not support the use of a gapfilling dummy node).
    2...Gaps are filled using the last available value.
    3...Gaps are filled using a standard load profile.
    '''

# VARIABLES FOR SIMULATION SETTINGS ###########################################
###############################################################################
class var_sim:
    # Time step for thermal (transient) simulation [s]
    delta_time_therm = 5
    # Time step for hydraulic (static) simulation [min]
    delta_time_hyd = 15
    # Nodes per meter of pipe length [-]
    n_m = 0.1

    # START VALUES FOR HYDRAULIC SOLUTION
    # mass flow [kg/s]
    m_dot_start = 1 #1
    # pressure [Pa]
    p_start = 200000 #200000
    # temperature [°C]
    t_start = 80 #80

# PLOTS #######################################################################
###############################################################################
class plots:
    # Input: whether to show plots [-]
    show_plot = "no"
    # Interval for updating the thermal plots [s]
    update_interval = 60
    # Output directory for visualisations
    output_dir = os.path.join(var_cons_list_analysis.data_dir, 'OUT_visualisations')
    # Topology file name
    # Strip path from topology file name
    topology_file_name = os.path.basename(var_cons_list_analysis.topology_file)
    # Strip extension from topology file name
    topology_file_name = os.path.splitext(topology_file_name)[0]
    


